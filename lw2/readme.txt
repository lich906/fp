LW2. Запустить режим отладки и выполнить задания:

Определите  функции. В качестве ответа скопируйте содержимое модуля в форум и прикрепите модуль в виде отдельного файла.

0. do_my_list(N)

do_my_list :: Int-> [Int]
--параметром является число N. функция генерирует список из N элементов, начиная с указанного элемента N
Например
do_my_list(5) вернет [5,6,7,8,9]
do_my_list(4) вернет [4,5,6,7] 

1. oddEven(L) -  функция перестановки местами соседних элементов списка L  (Например, список [2,5,7,9,1,8]  после преобразования будет иметь вид [5,2,9,7,8,1])   #2

2. insert (L,A,n) -  функция включения в список L заданного атома А на определенную позицию n .  #2  

3. listSumm(L1,L2) -  функция сложения элементов двух списков. Возвращает список , составленный из сумм элементов списков - параметров L1, L2. Учесть, что переданные списки могут быть разной длины.  #2

4 . position (L,A)- возвращает номер первого вхождения заданного атома  А в список L.  #2

5. Найти сумму  \( F(n) = \sum \limits_{i=1}^{n}i \)   .#2
6. Найти  сумму \( F(n) = \sum \limits_{i=1}^{n} n-i \)  .#2

в качестве шаблона  (lab2.hs) можно использовать
import System.IO
--здесь описание ваших функций
do_my_list :: Int-> [Int]
--параметром является число N. функция генерирует список из N элементов, начиная с указанного элемента N

main :: IO ()
  
main = do
       --пример кода для выполнения первого задания
       putStr "N1:"
       mylist <- readLn
       --mylist считывается с клавиатуры, используется для посторения исходного списка в do_my_List
       print ( oddEven (do_my_list mylist))